<?xml version="1.0" encoding="UTF-8"?>
<project name="JFritz" default="build" basedir=".">

	<property name="app.name" value="JFritz" />
	<property name="version" value="0.6.2" />

	<!-- compiler flags -->
	<property name="javac.debug" value="true" />
	<property name="javac.optimize" value="false" />

	<!-- directory properties -->
	<property name="home" value="ant" />
	<property name="src" value="src" />
	<property name="unittests" value="tests" />
	<property name="lib" value="lib" />
	<property name="lang" value="lang" />

	<!-- build properties -->
	<property name="build" value="${home}/build" />
	<property name="build.classes" value="${build}/classes" />
	<property name="build.unittests" value="${build}/unittests" />
	<property name="build.unittests.reports" value="${build.unittests}/reports" />

	<!-- java doc properties -->
	<property name="doc" value="${home}/doc" />

	<!-- release properties -->
	<property name="dist" value="${home}/dist" />
	<property name="archive" value="${home}/archiv" />
	<property name="javadoc-archive" value="${archive}/javadoc" />
	<property name="source-archive" value="${archive}/source" />
	<property name="binaries-archive" value="${archive}/binaries" />
	<property name="release" value="${home}/release" />
	<property name="jfritzdir" value="D:\Programme\JFritz" />


	<!-- include all jars in lib to classpath -->
	<path id="build.classpath">
		<fileset dir="${lib}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<path id="test.classpath">
		<path refid="build.classpath" />
		<pathelement location="${build.classes}" />
		<pathelement location="${build.unittests}" />
		<fileset dir="${build}">
			<include name="*.jar" />
		</fileset>
	</path>


	<target name="init" description="Show startup informations">
		<echo message="ant version:   ${ant.version}" />
		<echo message="java version:  ${ant.java.version}" />
		<echo message="" />
		<echo message="   ---------------------------------------------------------------" />
		<echo message="   project home:		${home}" />
		<echo message="   project build:  	${build}" />
		<echo message="   project source:	${src}" />
		<echo message="   ---------------------------------------------------------------" />
		<echo message="" />
		<echo message="Building ${app.name}..." />
	</target>

	<target name="compile" depends="init" description="Compile the source tree">
		<mkdir dir="${build}" />
		<mkdir dir="${build.classes}" />
		<javac srcdir="${src}" destdir="${build.classes}" classpathref="build.classpath" debug="${javac.debug}" optimize="${javac.optimize}" />
	</target>

	<target name="build" depends="jar" description="Generates runnable version of JFritz in directory dist">

		<mkdir dir="${dist}" />

		<!-- copy lib files -->
		<copy todir="${dist}/${lib}">
			<fileset dir="${lib}">
				<exclude name="**/*.java" />
				<exclude name="jacob.dll" />
			</fileset>
		</copy>
		<copy file="lib/jacob.dll" todir="${dist}" />

		<!-- copy lang files -->
		<copy todir="${dist}/lang">
			<fileset dir="lang">
			</fileset>
		</copy>

		<!-- copy all jar files -->
		<copy todir="${dist}">
			<fileset dir="${build}">
				<include name="**/*.jar" />
			</fileset>
		</copy>

	</target>

	<target name="jar" depends="compile" description="Generates jar files">
		<!-- copy ThreeStateButton ressource-files -->
		<copy todir="${build.classes}/de/moonflower/jfritz/utils/ThreeStateButton/images">
			<fileset dir="${src}/de/moonflower/jfritz/utils/ThreeStateButton/images" />
		</copy>
		<!-- copy ressource-files -->
		<copy todir="${build.classes}/de/moonflower/jfritz/resources">
			<fileset dir="${src}/de/moonflower/jfritz/resources" />
		</copy>

		<jar jarfile="${build}/other.jar" update="yes">
			<fileset dir="${build.classes}">
				<include name="**/*.*" />
				<exclude name="**/de/moonflower/jfritz/firmware/*.*" />
				<exclude name="**/de/moonflower/jfritz/utils/reverselookup/*.*" />
			</fileset>
			<manifest>
				<attribute name="Class-Path" value="./fritzbox.jar ./reverselookup.jar ${lib}/jdic.jar ${lib}/jfreereport-0.8.6-2.jar ${lib}/jcommon-1.0.0-rc1-cvs.jar ${lib}/itext-1.3.4.jar ${lib}/bsh-1.3.0.jar ${lib}/bsf-2.3.0.jar ${lib}/poi-2.5.1-final-20040804.jar ${lib}/jacob.jar ${lang}/ ${lib}/wizard.jar ${lib}/jcalendar-1.3.2.jar ${lib}/jfreechart-1.0.2.jar" />
			</manifest>
		</jar>

		<jar jarfile="${build}/jfritz.jar" update="yes">
			<fileset dir="${build.classes}">
				<include name="**/de/moonflower/jfritz/Main.*" />
			</fileset>
			<manifest>
				<attribute name="Main-Class" value="de.moonflower.jfritz.Main" />
				<attribute name="Class-Path" value="./other.jar" />
			</manifest>
		</jar>

		<jar jarfile="${build}/fritzbox.jar" update="yes">
			<fileset dir="${build.classes}">
				<include name="**/de/moonflower/jfritz/firmware/*.class" />
			</fileset>
		</jar>

		<jar jarfile="${build}/reverselookup.jar" update="yes">
			<fileset dir="${build.classes}">
				<include name="**/de/moonflower/jfritz/utils/reverselookup/*.class" />
			</fileset>
		</jar>

	</target>

	<target name="javadoc" depends="javadoc-clean,init" description="Generate Javadoc">
		<mkdir dir="${doc}" />
		<javadoc packagenames="de.moonflower.jfritz.*,com.*,org.*" access="public" source="1.4" splitindex="true" sourcepath="${src}" destdir="${doc}" author="true" version="true" use="true" windowtitle="${app.name} API" verbose="false" bottom="Copyright (c) 2005 Robert Palmer. Enjoy ${app.name}!">
			<doctitle>
				<![CDATA[<h1>${app.name}</h1>]]>
			</doctitle>
		<classpath refid="build.classpath" />
	</javadoc>
</target>

<target name="javadoc-clean" description="Cleans Javadoc">
	<delete dir="${doc}" />
</target>

<target name="javadoc-archive" depends="archive-init, javadoc" description="Geneartes Javadoc archive">
	<mkdir dir="${javadoc-archive}" />

	<tar tarfile="${javadoc-archive}/jfritz-${version}-javadoc.tar" basedir="${doc}" />
	<gzip src="${javadoc-archive}/jfritz-${version}-javadoc.tar" zipfile="${javadoc-archive}/jfritz-${version}-javadoc.tar.gz" />
	<delete file="${javadoc-archive}/jfritz-${version}-javadoc.tar" />
</target>

<target name="archive-init" description="Initializes archive directory">
	<mkdir dir="${archive}" />
</target>

<target name="clean" description="Cleans build, dist, doc and archive directories">
	<delete dir="${build}" />
	<delete dir="${doc}" />
	<delete dir="${dist}" />
	<delete dir="${archive}" />
</target>

<target name="update" description="Calls 'cvs update'-command">
	<cvs command="update" />
</target>

<target name="copyToFritzDir" depends="build" description="Copy files to JFritz installation directory">
	<mkdir dir="${jfritzdir}" />
	<!-- copy all jar files -->
	<copy todir="${jfritzdir}">
		<fileset dir="${build}">
			<include name="**/*.jar" />
		</fileset>
	</copy>
	<copy file="dist/jacob.dll" todir="${jfritzdir}" />
	<mkdir dir="${jfritzdir}/lang" />
	<copy todir="${jfritzdir}/lang">
		<fileset dir="lang">
		</fileset>
	</copy>
	<mkdir dir="${jfritzdir}/lib" />
	<copy todir="${jfritzdir}/lib">
		<fileset dir="lib">
		</fileset>
	</copy>
</target>

<target name="source-archive" depends="archive-init, build" description="Generates source archive">
	<mkdir dir="${source-archive}" />

	<copy todir="${source-archive}/tmp/${src}">
		<fileset dir="${src}">
			<include name="**/*.java" />
		</fileset>
	</copy>
	<copy todir="${source-archive}/tmp/${lib}">
		<fileset dir="${lib}">
			<include name="**/*.jar" />
		</fileset>
	</copy>
	<copy todir="${source-archive}/tmp/${lang}">
		<fileset dir="${lang}" />
	</copy>
	<copy file="${lib}/jacob.dll" todir="${source-archive}/tmp" />
	<copy file="build.xml" todir="${source-archive}/tmp" />
	<zip zipfile="${source-archive}/jfritz-${version}-source.zip" basedir="${source-archive}/tmp" />
	<delete dir="${source-archive}/tmp" />
</target>

<target name="archive" depends="archive-init, build, source-archive, javadoc-archive" description="Generates javadoc-, source- and binary-archives">
	<copy todir="${binaries-archive}/tmp">
		<fileset dir="${dist}" />
	</copy>
	<zip zipfile="${binaries-archive}/jfritz-${version}.zip" basedir="${binaries-archive}/tmp" />
	<delete dir="${binaries-archive}/tmp" />
</target>

<target name="junit" depends="compile" description="Runs all test cases and generate report">
	<mkdir dir="${build.unittests}" />
	<mkdir dir="${build.unittests.reports}" />
	<mkdir dir="${build.unittests.reports}/html" />
	<javac debug="${debug}" deprecation="on" srcdir="${unittests}" destdir="${build.unittests}" includes="**/*.java">
		<classpath refid="test.classpath" />
	</javac>

	<classpath refid="test.classpath" />
	<junit fork="yes" printsummary="on" filtertrace="on" haltonfailure="no" showoutput="yes">
		<classpath refid="test.classpath" />
		<formatter type="plain" usefile="false" />
		<formatter type="xml" extension=".xml" usefile="true" />
		<batchtest todir="${build.unittests.reports}">
			<fileset dir="${build.unittests}">
				<include name="**/*Test*.class" />
				<exclude name="**/AllTests.class" />
			</fileset>
		</batchtest>
	</junit>

	<junitreport todir="${build.unittests.reports}/html">
		<fileset dir="${build.unittests.reports}">
			<include name="TEST-*.xml" />
		</fileset>
		<report format="frames" todir="${build.unittests.reports}/html" />
	</junitreport>
</target>
</project>
